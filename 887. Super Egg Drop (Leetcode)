class Solution {
public:
    int compute(int n, int k, vector<vector<int>> &DP) {
        if(n == 1 || k == 1 || k == 0) return k;
        if(DP[n][k] != -1) return DP[n][k];
        int low = 1;
        int high = k;
        int ans = INT_MAX;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            int A = 1 + compute(n - 1, mid - 1, DP);
            int B = 1 + compute(n, k - mid, DP);
            ans = min(ans, max(A, B));
            if(A < B) {
                low = mid + 1;
            }
            else if(A > B) {
                high = mid - 1;
            }
            else {
                break;
            }
        }
        DP[n][k] = ans; 
        return DP[n][k];
    }
    int superEggDrop(int n, int k) {
        vector<vector<int>> DP(n + 1, vector<int>(k + 1, -1));
        return compute(n, k, DP);
    }
    
};
