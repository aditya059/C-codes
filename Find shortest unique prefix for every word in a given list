#include <bits/stdc++.h>
using namespace std;
typedef struct TrieNode {
    map<char, pair<int, TrieNode*>> children; 
} TrieNode;

void insert(TrieNode *root, string &str) {
    TrieNode *curr = root;
    for(int i = 0; i < str.length(); i++) {
        if(curr -> children[str[i]].second == nullptr) {
            curr -> children[str[i]].second = new TrieNode();
        }
        curr -> children[str[i]].first++;
        curr = curr -> children[str[i]].second; 
    }
}

string query(TrieNode *root, string &str) {
    TrieNode *curr = root;
    for(int i = 0; i < str.length(); i++) {
        if(curr -> children[str[i]].first == 1) 
        return str.substr(0, i + 1);
        curr = curr -> children[str[i]].second; 
    }
}

vector<string> Solution::prefix(vector<string> &A) {
    TrieNode *root = new TrieNode();
    vector<string> ans;
    for(int i = 0; i < A.size(); i++) {
        insert(root, A[i]);
    }
    for(int i = 0; i < A.size(); i++) {
        ans.push_back(query(root, A[i]));
    }
    return ans;
}
