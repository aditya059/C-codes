void dfs(int curr, vector<int> adj[], vector<bool> &visited, vector<int> &color, int c, int &ans) {
    if(ans != -1) return;
    visited[curr] = true;
    color[curr] = c;
    for(int next: adj[curr]) {
        if(color[next] != -1 && color[next] == c) {
            ans = 0;
            return;
        }
        if(visited[next] == false) {
            dfs(next, adj, visited, color, 1 - c, ans);
        }
    }
}
bool isBipartite(int V, vector<int>adj[]){
    // Code here
    int ans = -1;
    vector<bool> visited(V, false);
    vector<int> color(V, -1);
    for(int i = 0; i < V; i++) {
        if(visited[i] == false) {
            dfs(i, adj, visited, color, 0, ans);
        }
    }
    return -ans;
}
