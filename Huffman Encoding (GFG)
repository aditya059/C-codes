typedef struct node {
	    int data;
	    node *left;
	    node *right;
	    node(int val) {
	        data = val;
	        left = nullptr;
	        right = nullptr;
	    }
	} node;
	void preorder(node *root, vector<string> &ans, string res) {
	    if(root -> left == nullptr && root -> right == nullptr) {
	        ans.push_back(res);
	        return;
	    }
	    preorder(root -> left, ans, res + "0");
	    preorder(root -> right, ans, res + "1");
	}
	struct comp{
	    bool operator()(node *f, node *s) {
	        return f -> data > s -> data;
	    }
	};
	vector<string> huffmanCodes(string S,vector<int> f,int N)
	{
	    // Code here
	    auto comp = [](node *f, node *s) {
	        return f -> data > s -> data;
	    };
	    priority_queue<node*, vector<node*>, decltype(comp)> pq(comp);
	    //priority_queue<node*, vector<node*>, comp> pq; 
	    for(int i = 0; i < N; i++){
	        pq.push(new node(f[i]));
	    }	
	    while(pq.size() > 1) {
	        node *first = pq.top();
	        pq.pop();
	        node *second = pq.top();
	        pq.pop();
	        node *temp = new node(first -> data + second -> data);
	        temp -> left = first;
	        temp -> right = second;
	        pq.push(temp);
	    }
	    node *root = pq.top();
	    pq.pop();
	    vector<string> ans;
	    preorder(root, ans, "");
	    return ans;
	}
