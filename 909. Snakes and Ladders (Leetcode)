class Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        int k = 1;
        int jumpTo[(n * n) + 1];
        vector<bool> visited((n * n) + 1, false);
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(board[n - 1 - i][i % 2 == 0? j: n - 1 - j] == -1)
                    jumpTo[k] = k;
                else
                    jumpTo[k] = board[n - 1 - i][i % 2 == 0? j: n - 1 - j];
                k++;
            }
        }
        int moves = 0;
        queue<int> Queue;
        Queue.push(1);
        visited[1] = true;
        while(!Queue.empty()) {
            int sz = Queue.size();
            for(int i = 0; i < sz; i++) {
                int curr = Queue.front();
                Queue.pop();
                if(curr == n * n) return moves;
                for(int j = curr + 1; j <= min(curr + 6, n * n); j++) {
                    int next = jumpTo[j];
                    if(visited[next] == false) {
                        visited[next] = true;
                        Queue.push(next);
                    }
                }
            }
            moves++;
        }
        return -1;
    }
};
