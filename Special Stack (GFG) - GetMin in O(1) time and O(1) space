// GetMin in O(1) time and O(n) space
stack<int> s1;
void push(stack<int>& s, int a){
	// Your code goes here
	if(isEmpty(s)) {
	    s1.push(a);
	}
	else {
	    s1.push(min(a, s1.top()));
	}
	s.push(a);
}
bool isFull(stack<int>& s,int n){
	// Your code goes here
	return s.size() == n;
}
bool isEmpty(stack<int>& s){
	// Your code goes here
	return s.size() == 0;
}
int pop(stack<int>& s){
	// Your code goes here
	int x = s.top();
	s.pop();
	s1.pop();
	return x;
}
int getMin(stack<int>& s){
	// Your code goes here
	return s1.top();
}


//------------------------------------------------------------------
// GetMin in O(n) time and O(1) space
void push(stack<int>& s, int a){
	// Your code goes here
	s.push(a);
}
bool isFull(stack<int>& s,int n){
	// Your code goes here
	return s.size() == n;
}
bool isEmpty(stack<int>& s){
	// Your code goes here
	return s.empty();
}
int pop(stack<int>& s){
	// Your code goes here
	int n = s.top();
	s.pop();
	return n;
}
void minimum(stack<int> &s, int &mn) {
    if(s.size() == 0) return;
    int x = s.top();
	s.pop();
	mn = min(mn, x);
	minimum(s, mn);
	s.push(x);
}
int getMin(stack<int>& s){
	// Your code goes here
    int ans = 1e9;
    minimum(s, ans);
    return ans;
}
