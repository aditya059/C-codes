// O(nlogn) Approach
int findPlatform(int arr[], int dep[], int n)
{
  // Your code here
  multiset<pair<int, char>> Set;
  int ans = 0;
  int count = 0;
  for(int i = 0; i < n; i++) {
      Set.insert({dep[i], 'D'});
      Set.insert({arr[i], 'A'});
  }
  for(auto iter: Set) {
      if(iter.second == 'D') count--;
      else if(iter.second == 'A') count++;
      ans = max(ans, count);
  }
  return ans;
}

// O(n) Approach
int findPlatform(int arr[], int dep[], int n)
{
  // Your code here
  vector<int> Set(2400, 0);
  int ans = 0;
  for(int i = 0; i < n; i++) {
      Set[arr[i]]++;
      Set[dep[i] + 1]--;
  }
  partial_sum(Set.begin(), Set.end(), Set.begin());
  return *max_element(Set.begin(), Set.end());
}
